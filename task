===============================================
Task 1 (Задание 2 из playGround)
===============================================

Создайте функцию, которая принимает массив типа Cat и напишите логику, которая:
 - считает количество CreepyCat в массиве
 - если в массиве найден CuttieCat, то выводит в консоль его имя и уровень милоты
 - если это объект HappyCat, то вызовите функцию getCatDescription
 - возвращает массив котов, который состоит из котиков, не попавших под условия выше

Все классы, которые фигурируют в задаче, скопируйте в плэйграунд домашней работы из плэйграунда, с которым работали в классе.

===============================================
Task 2
===============================================

1. Создайте базовый класс «Артист», у которого должны быть следующие свойства:
- имя: разрешить только чтение
- возраст: сделать проверку на положительное значение
- страна работы (Беларусь, Россия, Украина, Польша, Турция)
- стаж работы: проверка на положительные значения
- зарплата в неделю: артист может отказаться её озвучивать
- зарплата за день: вычисляемая переменная на основе зарплаты в неделю (с учетом того, что рабочая неделя - 5 дней) 
- сколько процентов своей жизни работал артистом: вычисляемая переменная на основе данных возраста и стажа работы (подумайте, как вычислить)
- классовая переменная со средней зарплатой артиста
2. Добавьте 2 разных инициализатора (имя Артиста в каждом инициализаторе - обязательно)
3. Добавьте следующие методы:
- статический метод, возвращающий все возможные страны работы артиста. Сделать недоступным к переопределению
- статический метод, выводящий информацию о названии класса в консоль. Сделать доступным к переопределению в дочерних классах
- метод с информацией об артисте - выводит все свойства в читаемом виде. Недоступен к переопределению.
- метод «выступить», выводящий информацию об артисте, в каком жанре выступает и что показывает
4. Создать классы «Музыкант», «Художник», «Танцор», наследующиеся от артиста. 
5. В каждом классе переопределить метод с информацией о классе, вызвав реализацию родителя и добавив описание дочернего класса. Добавить следующую логику каждому классу:
- Танцор отказывается выступать, если его зарплата за день меньше 100, о чем сообщает в консоль. 
- Художник не хочет использовать своё родное имя, заменяя его на сценическое, которое состоит из перемешанных букв родного имени. 
- Музыканты не хотят работать в Турции, уезжая в любую другую страну из списка доступных, а также у них появляется новый параметр - любимый инструмент. 
6. Создать по два экземпляра каждого класса (в том числе родителя) с различными данными, положив их в массив типа Артист.
7. Пройтись по массиву и вызвать у каждого элемента метод выступить. 
Если в списке попался Танцор, то вывести его зарплату за день, если Музыкант, то отобразить любимый инструмент. 

===============================================
Task 3
===============================================

1. Создать протокол BusinessTrip:
- статическая переменная - доступные страны. на чтение и на запись
- страна назначения. только на чтение
- продолжительность поездки. только на чтение 
- флаг isCurrentlyInBusinessTrip. На чтение и на запись
- методы startTrip() endTrip()

2. Подчиниться протоколу BusinessTrip в классе Художник. Реализовать свойства и методы:
- художнику доступны для командировки Греция, Польша, Беларусь, Германия и Америка
- добавить инициализатор класса художник, который принимает страну назначения и продолжительность поездки
- добавить пустой инициализатор класса художник, который устанавливает рандомную страну назначения и рандомную продолжительнсть поездки. 
- реализовать функцию начала поездки, которая начинают поездку в страну назначения только если она есть в списке доступных стран
- реализовать функцию конца поездки, которая выводит информацию о поездке: страна назначения, продолжительность. 

3. Создать протокол PayableBusinessTrip, наследующийся от протокола BusinessTrip:
- salaryInBusinessTrip. Только на чтение
- salaryCoefficient. Только на чтение
- метод paySalary()

4. Подчиниться в классе Музыкант протоколу PayableBusinessTrip:
- salaryCoefficient зависит от стажа работы: 1-2 года - 1x, 3-5 лет - 1.5x, > 5 лет -  2x. 
- salaryInBusinessTrip вычисляется на основе зарплаты за день (если артист отказался ее называть, то зарплата по умолчанию - 80), помноженной на salaryCoefficient
- paySalary() - выводит в консоль сумму, которую музыкант заработал за время командировки. 
- музыкантам доступны для командировки Латвия, Литва, Польша, Германия и Италия. 
- музыканты хотят работать только в Германии и Италии, поэтому отказываются ехать в другие страны и, соответственно, функция начала поездки не отработает.

5. Подчините класс Танцора протоколу PayableBusinessTrip:
- salaryInBusinessTrip вычисляется по такой же логике, как и у музыканта, только потом увеличивается ещё на на 10% 
- startTrip() - танцор не отправляется в командировку, если его зарплата за день в командировке меньше 100
- paySalary() - выводит в консоль сумму, которую музыкант заработал за время командировки. 
- танцорам доступны для командировки Украина, Грузия, Швеция, Швейцария и Финляндия. 
-
